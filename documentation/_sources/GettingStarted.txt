***************
Getting Started
***************


Installation & Requirements 
===========================

Provided you have already an environment with scientific python packages (e.g. the `Anaconda distribution by Continuum <https://store.continuum.io/cshop/anaconda/>`_) and a recent, working theano, you can simply clone the git repo, unpack the files, add the path pointing to the unpacked directory to your ``PYTHONPATH`` and run the scripts in the folders ``scripts`` and ``examples``. This way you can also edit the scripts directly. If you use Anaconda you need the ``h5py``-package additionally.

For step by step instructions, installation as a *package* and dependencies see :ref:`installation <installation>`.

.. Note::
	Theano uses CUDA hence only Nvidia-GPUs will work (alternatively it can use the CPU, but this might be too slow for large nets and CNNs).

.. Note::
  The whole toolkit was designed and tested on Linux systems (in particular Debian, Ubuntu, CentOS).


Overview
========

ELEKTRONN is structured into two subpackages which contain most importantly:
	* :ref:`net` package: NN-layers, a :py:class:`net.convnet.MixedConvNN` class that manages the layers and their training/output functions and optimizers for training
	* :ref:`training_pack` package: Data-Pipelines, :py:class:`training.trainer.Trainer` class that manages training initialisation and iterations, creates plots and log files

.. _basic-recipe:


Basic Recipe for CNN Training with Images
=========================================

.. Note::
  This section is addressed to people interested into large scale image processing tasks (such as encountered in connectomics). For smaller toy examples and processing of non-image data have a look at the:ref:`examples <examples>`.


* CNN training requires a data set of spatial input data (2d/3d, optional with a fourth axis for (colour) channels) and *labels* (also called: ground truth, annotations, targets) that correspond to the individual pixels in the images or to an image as a whole. The labels can be classes - then each pixel contains an integer number encoding the class membership - or alternatively floats for regression targets.

* Transform your data arrays to h5 data sets in separate files for images and labels.
	- images: shape (x,y,z)  or (ch,x,y,z)
	- labels: shape (x,y,z)
	- for classification: labels contain integer numbers, ranging from 0 to (#classes-1)
	- for regression: labels contain float numbers
	- for 2d images the dimension ``z`` can be viewed as the axis along which the instances of the training set are stacked

* Find a valid CNN architecture by by using :py:func:`net.netutils.CNNCalculator`.

* Edit ``config_template.py`` as a new file to specify your :ref:`training scenario <configuration>`.

* Run the script ``TrainCNN.py`` from command line (or from an IDE like spyder)::

    TrainCNN.py [config=</path/to_config_file>] [ gpu={Auto|False|<int>}] [no_X={True|False}]

* Inspect the printed output and the plots to refine training settings or detect misconfigurations. Training Neural Networks is hard work and needs time. For a better understanding of how they should be trained refer to the sources in the next section.

.. _literature:

Literature, Tutorials, Background
=================================

`Theano home page <http://deeplearning.net/software/theano/index.html>`_

`Theano tutorials <http://deeplearning.net/tutorial/contents.html>`_

`Extensive reading list from the deeplearning website <http://deeplearning.net/reading-list/>`_









